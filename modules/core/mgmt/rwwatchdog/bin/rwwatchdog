#!/usr/bin/env python3
# 
# (c) Copyright RIFT.io, 2013-2016, All Rights Reserved
#
# Author(s): Max Beckett
# Creation Date: 2/16/2016
# 

import argparse
import logging
import os
import signal
import sys

from rift.watchdog import Watchdog

def main():
    
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--negotiation-port",
        required=False,
        default="60999",
        type=int,
        help="port number to listen on for negotiating a connection")
    parser.add_argument(
        "--print-logs",
        required=False,
        action='store_true',        
        help="don't print to a file and instead print logs to stdout")

    arguments = parser.parse_args()

    try:
        log_filename = "%s/watchdog_log.txt" % os.environ['RIFT_ARTIFACTS']
    except KeyError:
        print("Must be run from within rift-shell", file=sys.stderr)
        sys.exit()

    if arguments.print_logs:
        logging.basicConfig(level=logging.DEBUG,                            
                            format='%(asctime)s %(name)-10s :: %(message)s',
                        )
    else:
        logging.basicConfig(filename=log_filename,
                            level=logging.DEBUG,
                            format='%(asctime)s %(name)-10s :: %(message)s',
                        )

    watchdog = Watchdog(arguments.negotiation_port)

    # setup SIGINT handler
    def signal_handler(signal, frame):
        watchdog.stop()
        quit()

    signal.signal(signal.SIGINT, signal_handler)
    
    # start
    try:
        watchdog.start()
    except OSError:
        print("port %s is already is use, exiting" % arguments.negotiation_port)
        return

if __name__ == "__main__":
    main()


