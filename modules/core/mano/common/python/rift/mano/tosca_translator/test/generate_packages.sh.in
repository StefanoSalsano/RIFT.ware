#!/usr/bin/bash

# Generate a TOSCA package with the existing descriptor and
# correct image files

set -x
set -e

SOURCE_DIR=@CMAKE_CURRENT_SOURCE_DIR@
BINARY_DIR=@CMAKE_CURRENT_BINARY_DIR@
PROJECT_TOP_DIR=@PROJECT_TOP_DIR@
PONG_QCOW_IMAGE=${RIFT_ROOT}/images/Fedora-x86_64-20-20131211.1-sda-pong.qcow2
PING_QCOW_IMAGE=${RIFT_ROOT}/images/Fedora-x86_64-20-20131211.1-sda-ping.qcow2

# These paths are needed for finding the overrides and so files
PYTHONPATH=${PYTHONPATH}:@RIFT_SUBMODULE_SOURCE_ROOT@/rwvcs/ra:@RIFT_SUBMODULE_BINARY_ROOT@/models/plugins/yang
PYTHON3PATH=${PYTHON3PATH}:@RIFT_SUBMODULE_SOURCE_ROOT@/rwvcs/ra:@RIFT_SUBMODULE_BINARY_ROOT@/models/plugins/yang
LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:@RIFT_SUBMODULE_BINARY_ROOT@/models/plugins/yang

# Data directory
DATA_DIR=${SOURCE_DIR}/data
if [ ! -d ${DATA_DIR} ]; then
    echo "Unable to find the data directory ${DATA_DIR}"
    exit 1
fi

# Remove any old directories
rm -rf ${BINARY_DIR}/ping_pong_csar

# Copy the csar from data dir
cp -r ${DATA_DIR}/ping_pong_csar .

# Update the images
IMAGE_DIR=${BINARY_DIR}/ping_pong_csar/images
cp ${PING_QCOW_IMAGE} ${IMAGE_DIR}
cp ${PONG_QCOW_IMAGE} ${IMAGE_DIR}

# Generate the zip file
CUR_DIR=`pwd`
cd ${BINARY_DIR}/ping_pong_csar
zip -r ../ping_pong_csar.zip .
cd ${CUR_DIR}

# Remove the working csar directory
rm -rf ${BINARY_DIR}/ping_pong_csar
